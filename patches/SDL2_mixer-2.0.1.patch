diff -burN SDL2_mixer-2.0.1/music_mod.c SDL2_mixer-2.0.1-PS3/music_mod.c
--- SDL2_mixer-2.0.1/music_mod.c	2013-08-10 13:39:58.000000000 -0400
+++ SDL2_mixer-2.0.1-PS3/music_mod.c	2022-01-18 23:00:00.000000000 -0300
@@ -44,6 +44,8 @@
 
 static int music_swap8;
 static int music_swap16;
+static int music_swapf;
+static int music_tof;
 
 /* Initialize the MOD player, with the given mixer settings
    This function returns 0, or -1 if there was an error.
@@ -59,6 +61,8 @@
     /* Set the MikMod music format */
     music_swap8 = 0;
     music_swap16 = 0;
+    music_swapf = 0;
+    music_tof = 0;
     switch (mixerfmt->format) {
 
         case AUDIO_U8:
@@ -84,6 +88,20 @@
         }
         break;
 
+        case AUDIO_F32LSB:
+        case AUDIO_F32MSB: {
+            music_tof = 1;
+#if SDL_BYTEORDER == SDL_LIL_ENDIAN
+            if ( mixerfmt->format == AUDIO_F32MSB ) {
+#else
+            if ( mixerfmt->format == AUDIO_F32LSB ) {
+#endif
+                music_swapf = 1;
+            }
+            *mikmod.md_mode = DMODE_16BITS;
+        }
+	break;
+
         default: {
             Mix_SetError("Unknown hardware audio format");
             return -1;
@@ -247,6 +265,9 @@
 /* Play some of a stream previously started with MOD_play() */
 int MOD_playAudio(MODULE *music, Uint8 *stream, int len)
 {
+     if (music_tof)
+         len /= 2;
+
     if (current_output_channels > 2) {
         int small_len = 2 * len / current_output_channels;
         int i;
@@ -273,6 +294,7 @@
                 }
                 break;
             case 16:
+            case 32:
                 for ( i=small_len/4; i; --i ) {
                     src -= 4;
                     dst -= 2 * current_output_channels;
@@ -317,6 +339,32 @@
             dst += 2;
         }
     }
+    if ( music_tof ) {
+        const Sint16 *src;
+        float *dst;
+        int i;
+
+        src = (const Sint16 *)(stream + len);
+        len *= 2;
+        dst = (float *)(stream + len);
+        for ( i=(len/4); i; --i ) {
+            const Sint16 tmp = *--src;
+            *--dst = ((float)tmp) * 3.05185094759972e-05f;
+        }
+        if ( music_swapf ) {
+            Uint8 *dst, tmp;
+            dst = stream;
+            for ( i=(len/4); i; --i ) {
+                tmp = dst[0];
+                dst[0] = dst[3];
+                dst[3] = tmp;
+                tmp = dst[1];
+                dst[1] = dst[2];
+                dst[2] = tmp;
+                dst += 4;
+            }
+        }
+    }
     return 0;
 }
 
